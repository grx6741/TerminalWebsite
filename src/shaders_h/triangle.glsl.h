#pragma once
/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Cmdline:
        sokol-shdc -i src/shaders/triangle.glsl -o src/shaders_h/triangle.glsl.h -l glsl300es

    Overview:
    =========
    Shader program: 'display':
        Get shader desc: display_shader_desc(sg_query_backend());
        Vertex shader: vs
            Attributes:
                ATTR_vs_a_pos => 0
                ATTR_vs_a_tex_coords => 1
        Fragment shader: fs
            Image '_diffuse_texture':
                Image type: SG_IMAGETYPE_2D
                Sample type: SG_IMAGESAMPLETYPE_FLOAT
                Multisampled: false
                Bind slot: SLOT__diffuse_texture => 0
            Sampler 'diffuse_texture_smp':
                Type: SG_SAMPLERTYPE_FILTERING
                Bind slot: SLOT_diffuse_texture_smp => 0
            Image Sampler Pair '_diffuse_texture_diffuse_texture_smp':
                Image: _diffuse_texture
                Sampler: diffuse_texture_smp
*/
#if !defined(SOKOL_GFX_INCLUDED)
#error "Please include sokol_gfx.h before triangle.glsl.h"
#endif
#if !defined(SOKOL_SHDC_ALIGN)
#if defined(_MSC_VER)
#define SOKOL_SHDC_ALIGN(a) __declspec(align(a))
#else
#define SOKOL_SHDC_ALIGN(a) __attribute__((aligned(a)))
#endif
#endif
#define ATTR_vs_a_pos (0)
#define ATTR_vs_a_tex_coords (1)
#define SLOT__diffuse_texture (0)
#define SLOT_diffuse_texture_smp (0)
/*
    #version 300 es

    layout(location = 0) in vec2 a_pos;
    out vec2 tex_coords;
    layout(location = 1) in vec2 a_tex_coords;

    void main()
    {
        gl_Position = vec4(a_pos, 0.0, 1.0);
        tex_coords = a_tex_coords;
    }

*/
static const uint8_t vs_source_glsl300es[208] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,
    0x20,0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x61,0x5f,
    0x70,0x6f,0x73,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x32,0x20,0x74,0x65,
    0x78,0x5f,0x63,0x6f,0x6f,0x72,0x64,0x73,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,
    0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x31,0x29,0x20,0x69,
    0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x61,0x5f,0x74,0x65,0x78,0x5f,0x63,0x6f,0x6f,
    0x72,0x64,0x73,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,
    0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,
    0x69,0x6f,0x6e,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x61,0x5f,0x70,0x6f,0x73,
    0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x74,0x65,0x78,0x5f,0x63,0x6f,0x6f,0x72,0x64,0x73,0x20,0x3d,0x20,0x61,0x5f,
    0x74,0x65,0x78,0x5f,0x63,0x6f,0x6f,0x72,0x64,0x73,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,

};
/*
    #version 300 es
    precision mediump float;
    precision highp int;

    uniform highp sampler2D _diffuse_texture_diffuse_texture_smp;

    layout(location = 0) out highp vec4 frag_color;
    in highp vec2 tex_coords;

    void main()
    {
        frag_color = texture(_diffuse_texture_diffuse_texture_smp, tex_coords);
    }

*/
static const uint8_t fs_source_glsl300es[295] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x70,0x72,0x65,0x63,0x69,0x73,0x69,0x6f,0x6e,0x20,0x6d,0x65,0x64,0x69,0x75,0x6d,
    0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x3b,0x0a,0x70,0x72,0x65,0x63,0x69,0x73,0x69,
    0x6f,0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x69,0x6e,0x74,0x3b,0x0a,0x0a,0x75,
    0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x73,0x61,0x6d,
    0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x5f,0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x5f,
    0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x5f,
    0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x73,0x6d,0x70,0x3b,0x0a,0x0a,0x6c,0x61,
    0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,
    0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,
    0x34,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x69,0x6e,
    0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x32,0x20,0x74,0x65,0x78,0x5f,
    0x63,0x6f,0x6f,0x72,0x64,0x73,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,
    0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,
    0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,
    0x5f,0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,
    0x5f,0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,
    0x5f,0x73,0x6d,0x70,0x2c,0x20,0x74,0x65,0x78,0x5f,0x63,0x6f,0x6f,0x72,0x64,0x73,
    0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
static inline const sg_shader_desc* display_shader_desc(sg_backend backend) {
    if (backend == SG_BACKEND_GLES3) {
        static sg_shader_desc desc;
        static bool valid;
        if (!valid) {
            valid = true;
            desc.attrs[0].name = "a_pos";
            desc.attrs[1].name = "a_tex_coords";
            desc.vs.source = (const char*)vs_source_glsl300es;
            desc.vs.entry = "main";
            desc.fs.source = (const char*)fs_source_glsl300es;
            desc.fs.entry = "main";
            desc.fs.images[0].used = true;
            desc.fs.images[0].multisampled = false;
            desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
            desc.fs.images[0].sample_type = SG_IMAGESAMPLETYPE_FLOAT;
            desc.fs.samplers[0].used = true;
            desc.fs.samplers[0].sampler_type = SG_SAMPLERTYPE_FILTERING;
            desc.fs.image_sampler_pairs[0].used = true;
            desc.fs.image_sampler_pairs[0].image_slot = 0;
            desc.fs.image_sampler_pairs[0].sampler_slot = 0;
            desc.fs.image_sampler_pairs[0].glsl_name = "_diffuse_texture_diffuse_texture_smp";
            desc.label = "display_shader";
        }
        return &desc;
    }
    return 0;
}
